{"version":3,"sources":["components/HouseItem/index.js","components/HouseItem/index.module.scss","components/NoHouse/index.js","components/NoHouse/index.module.css","components/Sticky/index.module.scss","pages/HouesList/components/FilterTitle/index.module.css","components/FilterFooter/index.module.css","pages/HouesList/components/FilterMore/index.module.css","pages/HouesList/components/Filter/index.module.css","pages/HouesList/index.module.scss","components/Sticky/index.js","pages/HouesList/components/FilterTitle/index.js","components/FilterFooter/index.js","pages/HouesList/components/FilterPicker/index.js","pages/HouesList/components/FilterMore/index.js","pages/HouesList/components/Filter/index.js","pages/HouesList/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","_index_module_scss__WEBPACK_IMPORTED_MODULE_3__","_index_module_scss__WEBPACK_IMPORTED_MODULE_3___default","withRouter","_ref","houseCode","houseImg","title","desc","tags","price","history","style","a","createElement","className","styles","house","onClick","push","concat","imgWrap","img","src","BASE_URL","alt","content","map","tag","index","tagClass","key","join","priceNum","module","exports","tag1","tag2","tag3","_utils_url__WEBPACK_IMPORTED_MODULE_1__","_index_module_css__WEBPACK_IMPORTED_MODULE_2__","_index_module_css__WEBPACK_IMPORTED_MODULE_2___default","NoHouse","children","root","msg","fixed","dropdown","selected","btn","cancel","ok","mask","tagActive","dl","dt","dd","footer","searchHeader","houseSearchHeader","loading","Sticky","contentRef","createRef","placeholderRef","handleScroll","height","_this","props","placeholderEl","current","contentEl","getBoundingClientRect","top","classList","add","remove","window","addEventListener","this","removeEventListener","react_default","Fragment","ref","Component","titleList","type","FilterTitle","titleSelectedStatus","flex_default","align","item","isSelected","Item","FilterFooter","onCancel","onSave","cancelText","defaultProps","FilterPicker","state","value","defaultValue","handleChange","val","setState","_this$props","data","cols","picker_view_default","onChange","components_FilterFooter","FilterMore","selectedValues","newSelectedValues","Object","toConsumableArray","indexOf","filter","_this2","label","_this3","_this$props$data","roomType","oriented","floor","characteristic","renderFilters","area","mode","more","Filter","openType","filtersData","onTitleClick","htmlBody","_this$state","newTitleSelectedStatus","objectSpread2","keys","forEach","selectedVal","selectedStatus","getTitleSelectedStatus","assign","_this$state2","areaValue","defineProperty","filters","areaKey","length","replace","rentType","onFilter","document","body","getCurrentCity","API","get","params","id","res","_this$state3","_this$state3$filtersD","subway","FilterPicker_FilterPicker","_this$state4","_this$state4$filtersD","FilterMore_FilterMore","isHide","renderprops","to","opacity","renderMask","renderFilterPicker","renderFilterMore","HouseList","list","count","isLoaded","scrollTo","searchHouseList","renderHouseItems","HouseItem","isRowLoaded","_ref2","loadMoreRows","_ref3","startIndex","stopIndex","Promise","_ref4","asyncToGenerator","regenerator_default","mark","_callee","resolve","wrap","_context","prev","next","cityId","start","end","sent","stop","_x","apply","arguments","location","search","toast_default","hide","info","InfiniteLoader_default","rowCount","_ref6","onRowsRendered","registerChild","WindowScroller_default","_ref7","isScrolling","scrollTop","AutoSizer_default","_ref8","width","List_default","autoHeight","rowHeight","rowRenderer","goBack","SearchHeader","cityName","components_Sticky","Filter_Filter","renderHouseList","React"],"mappings":"2FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,IAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAAE,EAAAG,GAiEeE,gBAvDG,SAAAC,GAAA,IAChBC,EADgBD,EAChBC,UACAC,EAFgBF,EAEhBE,SACAC,EAHgBH,EAGhBG,MACAC,EAJgBJ,EAIhBI,KACAC,EALgBL,EAKhBK,KACAC,EANgBN,EAMhBM,MACAC,EAPgBP,EAOhBO,QACAC,EARgBR,EAQhBQ,MARgB,OAUhBf,EAAAgB,EAAAC,cAAA,OACEC,UAAWC,IAAOC,MAClBL,MAAOA,EACPM,QAAS,kBAAMP,EAAQQ,KAAR,YAAAC,OAAyBf,MAExCR,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAOK,SACrBxB,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAOM,IAAKC,IAAG,GAAAH,OAAKI,KAALJ,OAAgBd,GAAYmB,IAAI,MAEjE5B,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAOU,SACrB7B,EAAAgB,EAAAC,cAAA,MAAIC,UAAWC,IAAOT,OAAQA,GAC9BV,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAOR,MAAOA,GAC9BX,EAAAgB,EAAAC,cAAA,WACGL,EAAKkB,IAAI,SAACC,EAAKC,GACd,GAAGA,GAAS,EAAG,OAAO,KAItB,IAAMC,EAAWD,GAAS,EAAT,MAAAT,OAAmBS,EAAQ,GAAM,OAElD,OACEhC,EAAAgB,EAAAC,cAAA,QACEiB,IAAKF,EACLd,UAAW,CAACC,IAAOY,IAAKZ,IAAOc,IAAWE,KAAK,MAE9CJ,MAKT/B,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAON,OACrBb,EAAAgB,EAAAC,cAAA,QAAMC,UAAWC,IAAOiB,UAAWvB,GADrC,2CChDNwB,EAAAC,QAAA,CAAkBlB,MAAA,yBAAAI,QAAA,2BAAAC,IAAA,uBAAAI,QAAA,2BAAAnB,MAAA,yBAAAC,KAAA,wBAAAE,MAAA,yBAAAuB,SAAA,4BAAAL,IAAA,uBAAAQ,KAAA,wBAAAC,KAAA,wBAAAC,KAAA,2DCDlB,IAAA3C,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAA4C,EAAA3C,EAAA,IAAA4C,EAAA5C,EAAA,KAAA6C,EAAA7C,EAAAE,EAAA0C,GAsBeE,IAfC,SAAAtC,GAAA,IAAGuC,EAAHvC,EAAGuC,SAAH,OACd9C,EAAAgB,EAAAC,cAAA,OAAKC,UAAWC,IAAO4B,MACrB/C,EAAAgB,EAAAC,cAAA,OACEC,UAAWC,IAAOM,IAClBC,IAAKC,IAAW,qBAChBC,IAAI,6BAEN5B,EAAAgB,EAAAC,cAAA,KAAGC,UAAWC,IAAO6B,KAAMF,0BCb/BT,EAAAC,QAAA,CAAkBS,KAAA,sBAAAtB,IAAA,qBAAAuB,IAAA,2CCAlBX,EAAAC,QAAA,CAAkBW,MAAA,4CCAlBZ,EAAAC,QAAA,CAAkBS,KAAA,0BAAAG,SAAA,8BAAAC,SAAA,oDCAlBd,EAAAC,QAAA,CAAkBS,KAAA,2BAAAK,IAAA,0BAAAC,OAAA,6BAAAC,GAAA,+CCAlBjB,EAAAC,QAAA,CAAkBS,KAAA,yBAAAQ,KAAA,yBAAA3C,KAAA,yBAAAmB,IAAA,wBAAAyB,UAAA,8BAAAC,GAAA,uBAAAC,GAAA,uBAAAC,GAAA,uBAAAC,OAAA,iDCAlBvB,EAAAC,QAAA,CAAkBS,KAAA,qBAAAQ,KAAA,qBAAA1B,QAAA,8CCAlBQ,EAAAC,QAAA,CAAkBS,KAAA,wBAAAc,aAAA,gCAAAC,kBAAA,qCAAAC,QAAA,kVCmFHC,6MA/DbC,WAAaC,wBAEbC,eAAiBD,wBAGjBE,aAAe,WAAM,IACXC,EAAWC,EAAKC,MAAhBF,OAGFG,EAAgBF,EAAKH,eAAeM,QAEpCC,EAAYJ,EAAKL,WAAWQ,QAElBD,EAAcG,wBAAtBC,KAEG,GAKTF,EAAUG,UAAUC,IAAI3D,IAAO8B,OAE/BuB,EAAczD,MAAMsD,OAApB,GAAA9C,OAAgC8C,EAAhC,QAGAK,EAAUG,UAAUE,OAAO5D,IAAO8B,OAClCuB,EAAczD,MAAMsD,OAAS,2FAM/BW,OAAOC,iBAAiB,SAAUC,KAAKd,6DAKvCY,OAAOG,oBAAoB,SAAUD,KAAKd,+CAI1C,OACEgB,EAAApE,EAAAC,cAAAmE,EAAApE,EAAAqE,SAAA,KAEED,EAAApE,EAAAC,cAAA,OAAKqE,IAAKJ,KAAKf,iBASfiB,EAAApE,EAAAC,cAAA,OAAKqE,IAAKJ,KAAKjB,YAAaiB,KAAKX,MAAMzB,kBAvD1ByC,0DCZfC,EAAY,CAChB,CAAE9E,MAAO,eAAM+E,KAAM,QACrB,CAAE/E,MAAO,eAAM+E,KAAM,QACrB,CAAE/E,MAAO,eAAM+E,KAAM,SACrB,CAAE/E,MAAO,eAAM+E,KAAM,SAGR,SAASC,EAATnF,GAAuD,IAAhCc,EAAgCd,EAAhCc,QAASsE,EAAuBpF,EAAvBoF,oBAC7C,OACEP,EAAApE,EAAAC,cAAA2E,EAAA5E,EAAA,CAAM6E,MAAM,SAAS3E,UAAWC,IAAO4B,MACpCyC,EAAU1D,IAAI,SAAAgE,GAGb,IAAMC,EAAaJ,EAAoBG,EAAKL,MAE5C,OACEL,EAAApE,EAAAC,cAAA2E,EAAA5E,EAAMgF,KAAN,CAAW9D,IAAK4D,EAAKL,MAEnBL,EAAApE,EAAAC,cAAA,QACEI,QAAS,kBAAMA,EAAQyE,EAAKL,OAC5BvE,UAAW,CACTC,IAAO+B,SACP6C,EAAa5E,IAAOgC,SAAW,IAC/BhB,KAAK,MAEPiD,EAAApE,EAAAC,cAAA,YAAO6E,EAAKpF,OACZ0E,EAAApE,EAAAC,cAAA,KAAGC,UAAU,4EC1B3B,SAAS+E,EAAT1F,GAA0E,IAAlDW,EAAkDX,EAAlDW,UAAWH,EAAuCR,EAAvCQ,MAAOmF,EAAgC3F,EAAhC2F,SAAUC,EAAsB5F,EAAtB4F,OAAQC,EAAc7F,EAAd6F,WAC1D,OACEhB,EAAApE,EAAAC,cAAA2E,EAAA5E,EAAA,CAAMD,MAAOA,EAAOG,UAAW,CAACC,IAAO4B,KAAM7B,GAAa,IAAIiB,KAAK,MAEjEiD,EAAApE,EAAAC,cAAA,QACEC,UAAW,CAACC,IAAOiC,IAAKjC,IAAOkC,QAAQlB,KAAK,KAC5Cd,QAAS6E,GAERE,GAIHhB,EAAApE,EAAAC,cAAA,QAAMC,UAAW,CAACC,IAAOiC,IAAKjC,IAAOmC,IAAInB,KAAK,KAAMd,QAAS8E,GAA7D,iBAcNF,EAAaI,aAAe,CAC1BD,WAAY,gBAGCH,QC/BMK,6MACnBC,MAAQ,CAGNC,MAAOlC,EAAKC,MAAMkC,gBA0BpBC,aAAe,SAAAC,GAEbrC,EAAKsC,SAAS,CACZJ,MAAOG,6EAIF,IAAAE,EACwC3B,KAAKX,MAA5C2B,EADDW,EACCX,SAAUC,EADXU,EACWV,OAAQW,EADnBD,EACmBC,KAAMC,EADzBF,EACyBE,KAAMtB,EAD/BoB,EAC+BpB,KAC9Be,EAAUtB,KAAKqB,MAAfC,MAER,OACEpB,EAAApE,EAAAC,cAAAmE,EAAApE,EAAAqE,SAAA,KAOED,EAAApE,EAAAC,cAAA+F,EAAAhG,EAAA,CACE8F,KAAMA,EACNN,MAAOA,EACPO,KAAMA,EACNE,SAAU/B,KAAKwB,eAIjBtB,EAAApE,EAAAC,cAACiG,EAAD,CACEhB,SAAU,kBAAMA,EAAST,IACzBU,OAAQ,kBAAMA,EAAOV,EAAMe,cA3DKjB,+BCArB4B,6MACnBZ,MAAQ,CAENa,eAAgB9C,EAAKC,MAAMkC,gBAI7BC,aAAe,SAAAF,GAAS,IAEdY,EAAmB9C,EAAKiC,MAAxBa,eAEJC,EAAiBC,OAAAC,EAAA,EAAAD,CAAOF,GAExBA,EAAeI,QAAQhB,IAAU,EAOnCa,EAAoBD,EAAeK,OAAO,SAAA3B,GAAI,OAAIA,IAASU,IAG3Da,EAAkB/F,KAAKkF,GAGzBlC,EAAKsC,SAAS,CACZQ,eAAgBC,kFAKNP,GAAM,IAAAY,EAAAxC,KAElB,OAAO4B,EAAKhF,IAAI,SAAAgE,GAEd,IAAMC,EAAa2B,EAAKnB,MAAMa,eAAeI,QAAQ1B,EAAKU,QAAU,EAEpE,OACEpB,EAAApE,EAAAC,cAAA,QACEiB,IAAK4D,EAAKU,MACVtF,UAAW,CAACC,IAAOY,IAAKgE,EAAa5E,IAAOqC,UAAY,IAAIrB,KAAK,KACjEd,QAAS,kBAAMqG,EAAKhB,aAAaZ,EAAKU,SAErCV,EAAK6B,0CAML,IAAAC,EAAA1C,KAAA2B,EAMH3B,KAAKX,MANFsD,EAAAhB,EAELC,KAAQgB,EAFHD,EAEGC,SAAUC,EAFbF,EAEaE,SAAUC,EAFvBH,EAEuBG,MAAOC,EAF9BJ,EAE8BI,eACnC9B,EAHKU,EAGLV,OACAD,EAJKW,EAILX,SACAT,EALKoB,EAKLpB,KAGM2B,EAAmBlC,KAAKqB,MAAxBa,eAER,OACEhC,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,IAAO4B,MAErBqC,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,IAAOoC,KAAMlC,QAAS,kBAAM6E,EAAST,MAGrDL,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,IAAOP,MACrBwE,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOsC,IACpB2B,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOuC,IAAtB,gBACA0B,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOwC,IAAKuB,KAAKgD,cAAcJ,IAE9C1C,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOuC,IAAtB,gBACA0B,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOwC,IAAKuB,KAAKgD,cAAcH,IAE9C3C,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOuC,IAAtB,gBACA0B,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOwC,IAAKuB,KAAKgD,cAAcF,IAE9C5C,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOuC,IAAtB,4BACA0B,EAAApE,EAAAC,cAAA,MAAIC,UAAWC,IAAOwC,IAAKuB,KAAKgD,cAAcD,MAKlD7C,EAAApE,EAAAC,cAACiG,EAAD,CACEhG,UAAWC,IAAOyC,OAClBwC,WAAW,eACXF,SAAU,kBAAM0B,EAAKhB,SAAS,CAAEQ,eAAgB,MAChDjB,OAAQ,kBAAMA,EAAOV,EAAM2B,cAvFG7B,+BCUlCI,EAAsB,CAC1BwC,MAAM,EACNC,MAAM,EACNvH,OAAO,EACPwH,MAAM,GAIFjB,EAAiB,CACrBe,KAAM,CAAC,OAAQ,QACfC,KAAM,CAAC,QACPvH,MAAO,CAAC,QACRwH,KAAM,IAGaC,8MACnB/B,MAAQ,CAENZ,sBAIA4C,SAAU,GAGVC,YAAa,GAGbpB,oBAgCFqB,aAAe,SAAAhD,GAEbnB,EAAKoE,SAASxH,UAAY,QAFL,IAAAyH,EAM2BrE,EAAKiC,MAA7CZ,EANagD,EAMbhD,oBAAqByB,EANRuB,EAMQvB,eAGvBwB,EAAsBtB,OAAAuB,EAAA,EAAAvB,CAAA,GAAQ3B,GAIpC2B,OAAOwB,KAAKnD,GAAqBoD,QAAQ,SAAA7G,GACvC,IAAM8G,EAAc5B,EAAelF,GAEnC,GAAIA,IAAQuD,EAEVmD,EAAuBnD,IAAQ,MAC1B,CAEL,IAAMwD,EAAiB3E,EAAK4E,uBAAuBhH,EAAK8G,GAGxD1B,OAAO6B,OAAOP,EAAwBK,MAI1C3E,EAAKsC,SAAS,CAEZ2B,SAAU9C,EAGVE,oBAAqBiD,OAMzB1C,SAAW,SAAAT,GAETnB,EAAKoE,SAASxH,UAAY,GAFT,IAAAkI,EAI+B9E,EAAKiC,MAA7CZ,EAJSyD,EAITzD,oBAEFqD,EANWI,EAIYhC,eAEM3B,GAE7BmD,EAAyBtE,EAAK4E,uBAClCzD,EACAuD,GAGF1E,EAAKsC,SAAS,CACZ2B,SAAU,GAGV5C,oBAAoB2B,OAAAuB,EAAA,EAAAvB,CAAA,GACf3B,EADc,GAEdiD,QAQTzC,OAAS,SAACV,EAAMe,GAEdlC,EAAKoE,SAASxH,UAAY,GAFF,IAuCpBmI,EAlCI1D,EAAwBrB,EAAKiC,MAA7BZ,oBAGFqD,EAAcxC,EAIdoC,EAAyBtE,EAAK4E,uBAClCzD,EACAuD,GAaI3B,EAAiBC,OAAAuB,EAAA,EAAAvB,CAAA,GAClBhD,EAAKiC,MAAMa,eADOE,OAAAgC,EAAA,EAAAhC,CAAA,GAIpB7B,EAAOe,IAIJ+C,EAAU,GAEVpB,EAAOd,EAAkBc,KACzBqB,EAAUrB,EAAK,GAQnBkB,EADkB,IAAhBlB,EAAKsB,OACKtB,EAAK,GAEO,SAAZA,EAAK,GAAgBA,EAAK,GAAKA,EAAK,GAElDoB,EAAQC,GAAWH,EAGnBE,EAAQ1I,MAAQwG,EAAkBxG,MAAM,GAExC0I,EAAQ1I,MAAQ0I,EAAQ1I,MAAM6I,QAAQ,SAAU,IAGhDH,EAAQI,SAAWtC,EAAkBe,KAAK,GAE1CmB,EAAQlB,KAAOhB,EAAkBgB,KAAKlG,KAAK,KAI3CmC,EAAKC,MAAMqF,SAASL,GAEpBjF,EAAKsC,SAAS,CACZ2B,SAAU,GAEV5C,oBAAoB2B,OAAAuB,EAAA,EAAAvB,CAAA,GACf3B,EADc,GAEdiD,GAILxB,eAAgBC,iNAxKlBnC,KAAKwD,SAAWmB,SAASC,cAEDC,qCAAhBvD,mBAEUwD,IAAIC,IAAI,oBAAqB,CAC7CC,OAAQ,CACNC,GAAI3D,YAFF4D,SAMNlF,KAAK0B,SAAS,CACZ4B,YAAa4B,EAAItD,KAAKgD,wJAkKHrE,EAAMuD,GAI3B,IAAIJ,EAAyB,GAuB7B,MApBW,SAATnD,GACwB,IAAvBuD,EAAYS,QAAmC,SAAnBT,EAAY,GAIvB,SAATvD,GAAsC,SAAnBuD,EAAY,GAExCJ,EAAuBnD,IAAQ,EACb,UAATA,GAAuC,SAAnBuD,EAAY,GAEzCJ,EAAuBnD,IAAQ,EACb,SAATA,GAAmBuD,EAAYS,OAAS,EAGjDb,EAAuBnD,IAAQ,EAG/BmD,EAAuBnD,IAAQ,EAb/BmD,EAAuBnD,IAAQ,EAgB1BmD,+CAIY,IAaf9B,EAbeuD,EAKfnF,KAAKqB,MAHPgC,EAFiB8B,EAEjB9B,SAFiB+B,EAAAD,EAGjB7B,YAAeL,EAHEmC,EAGFnC,KAAMoC,EAHJD,EAGIC,OAAQZ,EAHZW,EAGYX,SAAU9I,EAHtByJ,EAGsBzJ,MACvCuG,EAJiBiD,EAIjBjD,eAGF,GAAiB,SAAbmB,GAAoC,SAAbA,GAAoC,UAAbA,EAChD,OAAO,KAMT,IAAIxB,EAAO,EAGPN,EAAeW,EAAemB,GAElC,OAAQA,GACN,IAAK,OACHxB,EAAO,EACPD,EAAO,CAACqB,EAAMoC,GACd,MACF,IAAK,OACHzD,EAAO6C,EACP,MACF,IAAK,QACH7C,EAAOjG,EAMX,OACEuE,EAAApE,EAAAC,cAACuJ,EAAD,CACEtI,IAAKqG,EACL9B,aAAcA,EACdhB,KAAM8C,EACNzB,KAAMA,EACNC,KAAMA,EACNZ,OAAQjB,KAAKiB,OACbD,SAAUhB,KAAKgB,sDAMF,IAAAuE,EAKbvF,KAAKqB,MAHPgC,EAFekC,EAEflC,SACAnB,EAHeqD,EAGfrD,eAHesD,EAAAD,EAIfjC,YAAeV,EAJA4C,EAIA5C,SAAUC,EAJV2C,EAIU3C,SAAUC,EAJpB0C,EAIoB1C,MAAOC,EAJ3ByC,EAI2BzC,eAG5C,GAAiB,SAAbM,EACF,OAAO,KAIT,IAAMzB,EAAO,CACXgB,WACAC,WACAC,QACAC,kBAIIxB,EAAeW,EAAeiB,KAEpC,OACEjD,EAAApE,EAAAC,cAAC0J,EAAD,CACElE,aAAcA,EACdhB,KAAM8C,EACNzB,KAAMA,EACNX,OAAQjB,KAAKiB,OACbD,SAAUhB,KAAKgB,gDAMR,IAAAwB,EAAAxC,KACHqD,EAAarD,KAAKqB,MAAlBgC,SAGFqC,EACS,SAAbrC,GAAoC,SAAbA,GAAoC,UAAbA,EAahD,OAEEnD,EAAApE,EAAAC,cAAC4J,EAAA,OAAD,CAAQC,GAAI,CAAEC,QAASH,EAAS,EAAI,IACjC,SAAArG,GAEC,OAAsB,IAAlBA,EAAMwG,QACD,KAIP3F,EAAApE,EAAAC,cAAA,OACEF,MAAOwD,EACPrD,UAAWC,IAAOoC,KAClBlC,QAAS,kBAAMqG,EAAKxB,SAASqC,yCAQhC,IACC5C,EAAwBT,KAAKqB,MAA7BZ,oBAER,OACEP,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,IAAO4B,MAGpBmC,KAAK8F,aAEN5F,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,IAAOU,SAErBuD,EAAApE,EAAAC,cAACyE,EAAD,CACErE,QAAS6D,KAAKuD,aACd9C,oBAAqBA,IAItBT,KAAK+F,qBAGL/F,KAAKgG,4BA3WoB3F,6ECAf4F,8MACnB5E,MAAQ,CACNoB,MAAO,GAEPyD,KAAM,GAENC,MAAO,EAEPC,UAAU,KAaZ/B,QAAU,KAgBVK,SAAW,SAAAL,GAGTvE,OAAOuG,SAAS,EAAG,GAEnBjH,EAAKiF,QAAUA,EAEfjF,EAAKkH,qBA0CPC,iBAAmB,SAAAlL,GAA2B,IAAxB2B,EAAwB3B,EAAxB2B,IAAKF,EAAmBzB,EAAnByB,MAAOjB,EAAYR,EAAZQ,MAI1B+E,EADWxB,EAAKiC,MAAd6E,KACUpJ,GAGlB,OAAK8D,EAWEV,EAAApE,EAAAC,cAACyK,EAAA,EAADpE,OAAA6B,OAAA,CAAWjH,IAAKA,EAAKnB,MAAOA,GAAW+E,IAR1CV,EAAApE,EAAAC,cAAA,OAAKiB,IAAKA,EAAKnB,MAAOA,GACpBqE,EAAApE,EAAAC,cAAA,KAAGC,UAAWC,KAAO4C,cAW7B4H,YAAc,SAAAC,GAAe,IAAZ5J,EAAY4J,EAAZ5J,MACf,QAASsC,EAAKiC,MAAM6E,KAAKpJ,MAI3B6J,aAAe,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,WAAYC,EAAgBF,EAAhBE,UAG5B,OAAO,IAAIC,QAAJ,eAAAC,EAAA5E,OAAA6E,EAAA,EAAA7E,CAAA8E,EAAApL,EAAAqL,KAAY,SAAAC,EAAMC,GAAN,IAAAnC,EAAA,OAAAgC,EAAApL,EAAAwL,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGC3C,IAAIC,IAAI,UAAW,CACnCC,OAAO5C,OAAAuB,EAAA,EAAAvB,CAAA,CACLsF,OAAQtI,EAAKkC,OACVlC,EAAKiF,QAFJ,CAGJsD,MAAOd,EACPe,IAAKd,MARQ,OAGX5B,EAHWqC,EAAAM,KAajBR,IAGAjI,EAAKsC,SAAS,CACZwE,KAAI,GAAA7J,OAAA+F,OAAAC,EAAA,EAAAD,CAAMhD,EAAKiC,MAAM6E,MAAjB9D,OAAAC,EAAA,EAAAD,CAA0B8C,EAAItD,KAAKgD,KAAKsB,SAjB7B,wBAAAqB,EAAAO,SAAAV,MAAZ,gBAAAW,GAAA,OAAAf,EAAAgB,MAAAhI,KAAAiI,YAAA,yFAvGPjI,KAAKqE,QAAQI,UAAW,EAExB,IAAMA,IAAazE,KAAKX,MAAM6I,SAASC,OAEpC1D,IAAUzE,KAAKqE,QAAQI,SAAWA,iLAQNI,8BAAvBpC,UAAOnB,UACftB,KAAKsB,MAAQA,EAEbtB,KAAKsG,kBAELtG,KAAK0B,SAAS,CACZe,4LAiBkBpD,sFAEpB+I,EAAAtM,EAAM+C,QAAQ,wBAAU,EAAG,MAAM,GAIjCmB,KAAK0B,SAAS,CACZ0E,UAAU,aAGMtB,IAAIC,IAAI,UAAW,CACnCC,OAAO5C,OAAAuB,EAAA,EAAAvB,CAAA,CACLsF,OAAQ1H,KAAKsB,OACVtB,KAAKqE,QAFJ,CAGJsD,MAAO,EACPC,IAAK,cALH1C,SAUNkD,EAAAtM,EAAMuM,SAEkBnD,EAAItD,KAAKgD,KAAzBsB,SAGM,KAHAC,YAIZiC,EAAAtM,EAAMwM,KAAN,sBAAAjM,OAAkB8J,EAAlB,uBAA+B,EAAG,MAAM,GAG1CnG,KAAK0B,SAAS,CACZwE,OACAC,QAEAC,UAAU,iJA0DI,IAAA5D,EAAAxC,KAAAyD,EACYzD,KAAKqB,MAAzB8E,EADQ1C,EACR0C,MAKR,OANgB1C,EACD2C,WAKED,EAERjG,EAAApE,EAAAC,cAAC4B,EAAA,EAAD,0GAIPuC,EAAApE,EAAAC,cAACwM,EAAAzM,EAAD,CACE2K,YAAazG,KAAKyG,YAClBE,aAAc3G,KAAK2G,aACnB6B,SAAUrC,GAET,SAAAsC,GAAA,IAAGC,EAAHD,EAAGC,eAAgBC,EAAnBF,EAAmBE,cAAnB,OACCzI,EAAApE,EAAAC,cAAC6M,EAAA9M,EAAD,KACG,SAAA+M,GAAwC,IAArC1J,EAAqC0J,EAArC1J,OAAQ2J,EAA6BD,EAA7BC,YAAaC,EAAgBF,EAAhBE,UAEvB,OACE7I,EAAApE,EAAAC,cAACiN,EAAAlN,EAAD,KACG,SAAAmN,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACChJ,EAAApE,EAAAC,cAACoN,EAAArN,EAAD,CACEsN,YAAU,EACVjK,OAAQA,EACR2J,YAAaA,EACbC,UAAWA,EACXG,MAAOA,EACPV,SAAUrC,EACVkD,UAAW,IACXC,YAAa9G,EAAK+D,iBAClBmC,eAAgBA,EAChBtI,IAAKuI,2CAYhB,IAEC/M,EAAYoE,KAAKX,MAAjBzD,QAER,OACEsE,EAAApE,EAAAC,cAAA,OAAKC,UAAWC,KAAO4B,MAErBqC,EAAApE,EAAAC,cAAA2E,EAAA5E,EAAA,CAAME,UAAWC,KAAO0C,cACtBuB,EAAApE,EAAAC,cAAA,KAAGC,UAAU,qBAAqBG,QAASP,EAAQ2N,SACnDrJ,EAAApE,EAAAC,cAACyN,EAAA,EAAD,CACEC,SAAUzJ,KAAKqB,MAAMoB,MACrBzG,UAAWC,KAAO2C,qBAMtBsB,EAAApE,EAAAC,cAAC2N,EAAD,CAAQvK,OAAQ,IACde,EAAApE,EAAAC,cAAC4N,GAAD,CAAQjF,SAAU1E,KAAK0E,YAIzBxE,EAAApE,EAAAC,cAAA,OAAKC,UAAU,OAAOgE,KAAK4J,2BA/MIC,IAAMxJ","file":"static/js/12.08cfa442.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { BASE_URL } from '../../utils'\r\n\r\nimport styles from './index.module.scss'\r\n\r\nconst HouseItem = ({\r\n  houseCode,\r\n  houseImg,\r\n  title,\r\n  desc,\r\n  tags,\r\n  price,\r\n  history,\r\n  style\r\n}) => (\r\n  <div\r\n    className={styles.house}\r\n    style={style}\r\n    onClick={() => history.push(`/details/${houseCode}`)}\r\n  >\r\n    <div className={styles.imgWrap}>\r\n      <img className={styles.img} src={`${BASE_URL}${houseImg}`} alt=\"\" />\r\n    </div>\r\n    <div className={styles.content}>\r\n      <h3 className={styles.title}>{title}</h3>\r\n      <div className={styles.desc}>{desc}</div>\r\n      <div>\r\n        {tags.map((tag, index) => {\r\n          if(index >= 2) return null\r\n          // 索引号：   0 1 2 3\r\n          // 对应类：tag1 2 3\r\n          // tagClass => tag1 / tag2 / tag3\r\n          const tagClass = index <= 2 ? `tag${index + 1}` : 'tag3'\r\n\r\n          return (\r\n            <span\r\n              key={index}\r\n              className={[styles.tag, styles[tagClass]].join(' ')}\r\n            >\r\n              {tag}\r\n            </span>\r\n          )\r\n        })}\r\n      </div>\r\n      <div className={styles.price}>\r\n        <span className={styles.priceNum}>{price}</span> 元/月\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nHouseItem.propTypes = {\r\n  houseImg: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  desc: PropTypes.string.isRequired,\r\n  tags: PropTypes.array.isRequired,\r\n  price: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  style: PropTypes.object\r\n}\r\n\r\nexport default withRouter(HouseItem)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"house\":\"HouseItem_house__Zkhjz\",\"imgWrap\":\"HouseItem_imgWrap__2gDXY\",\"img\":\"HouseItem_img__9cr8h\",\"content\":\"HouseItem_content__2IuQu\",\"title\":\"HouseItem_title__2rAuN\",\"desc\":\"HouseItem_desc__15jHU\",\"price\":\"HouseItem_price__Q7SZj\",\"priceNum\":\"HouseItem_priceNum__3NQNT\",\"tag\":\"HouseItem_tag__3bRKn\",\"tag1\":\"HouseItem_tag1__21zdU\",\"tag2\":\"HouseItem_tag2__2pmIC\",\"tag3\":\"HouseItem_tag3__gl09_\"};","import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { BASE_URL } from '../../utils/url'\r\nimport styles from './index.module.css'\r\n\r\nconst NoHouse = ({ children }) => (\r\n  <div className={styles.root}>\r\n    <img\r\n      className={styles.img}\r\n      src={BASE_URL + '/img/not-found.png'}\r\n      alt=\"暂无数据\"\r\n    />\r\n    <p className={styles.msg}>{children}</p>\r\n  </div>\r\n)\r\n\r\nNoHouse.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default NoHouse\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"NoHouse_root__3bM5U\",\"img\":\"NoHouse_img__33v3s\",\"msg\":\"NoHouse_msg__3wSro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixed\":\"Sticky_fixed__1f800\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterTitle_root__3hiSF\",\"dropdown\":\"FilterTitle_dropdown__QyvzE\",\"selected\":\"FilterTitle_selected__14iG-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterFooter_root__PYTLw\",\"btn\":\"FilterFooter_btn__11905\",\"cancel\":\"FilterFooter_cancel__1-9PG\",\"ok\":\"FilterFooter_ok__2DRw9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FilterMore_root__cDolW\",\"mask\":\"FilterMore_mask__34O-X\",\"tags\":\"FilterMore_tags__3Nf4P\",\"tag\":\"FilterMore_tag__2M-Wj\",\"tagActive\":\"FilterMore_tagActive__2UEir\",\"dl\":\"FilterMore_dl__3Xuq0\",\"dt\":\"FilterMore_dt__1Pngt\",\"dd\":\"FilterMore_dd__28Hue\",\"footer\":\"FilterMore_footer__1nQtb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Filter_root__20ZC_\",\"mask\":\"Filter_mask__3WcCN\",\"content\":\"Filter_content__3SdPe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"HouesList_root__2MClh\",\"searchHeader\":\"HouesList_searchHeader__2s6xP\",\"houseSearchHeader\":\"HouesList_houseSearchHeader__3MbGM\",\"loading\":\"HouesList_loading__3W1PX\"};","import React, { Component, createRef } from 'react'\r\n\r\n/* \r\n  ① 封装 Sticky 组件。\r\n  ② 在 HouseList 页面中，导入 Sticky 组件。\r\n  ③ 使用 Sticky 组件包裹要实现吸顶功能的 Filter 组件。\r\n  ④ 在 Sticky 组件中，创建两个 ref 对象（placeholder、content），分别指向占位元素和内容元素。\r\n  ⑤ 组件中，监听浏览器的 scroll 事件（注意销毁事件）。\r\n  ⑥ 在 scroll 事件中，通过 getBoundingClientRect() 方法得到筛选栏占位元素当前位置（top）。\r\n  ⑦ 判断 top 是否小于 0（是否在可视区内）。\r\n  ⑧ 如果小于，就添加需要吸顶样式（fixed），同时设置占位元素高度（与条件筛选栏高度相同）。\r\n  ⑨ 否则，就移除吸顶样式，同时让占位元素高度为 0\r\n*/\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport styles from './index.module.scss'\r\n\r\n// 创建吸顶组件\r\nclass Sticky extends Component {\r\n  // 内容ref对象\r\n  contentRef = createRef()\r\n  // 占位符ref对象\r\n  placeholderRef = createRef()\r\n\r\n  // 滚动事件的事件处理程序\r\n  handleScroll = () => {\r\n    const { height } = this.props\r\n    // console.log('页面滚动了')\r\n    // 占位符DOM对象\r\n    const placeholderEl = this.placeholderRef.current\r\n    // 内容DOM对象\r\n    const contentEl = this.contentRef.current\r\n\r\n    const { top } = placeholderEl.getBoundingClientRect()\r\n    // console.log('距离页面顶部的位置：', top)\r\n    if (top <= 0) {\r\n      // 固定在页面顶部，添加固定定位\r\n      // classList 是 H5 中为 DOM 对象提供的对象，用来操作DOM对象的样式\r\n      // classList.add() 表示添加类名\r\n      // classList.remove() 移除类名\r\n      contentEl.classList.add(styles.fixed)\r\n      // placeholderEl.style.height = '100px'\r\n      placeholderEl.style.height = `${height}px`\r\n    } else {\r\n      // 取消固定定位\r\n      contentEl.classList.remove(styles.fixed)\r\n      placeholderEl.style.height = '0px'\r\n    }\r\n  }\r\n\r\n  // 监听浏览器的滚动事件\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll)\r\n  }\r\n\r\n  // 在组件卸载时，解绑事件\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* 占位符 */}\r\n        <div ref={this.placeholderRef} />\r\n        {/*\r\n          内容\r\n\r\n            通过 children 属性，获取到了 Sticky 组件子节点\r\n          <Sticky>\r\n            <Filter />\r\n          </Sticky>\r\n        */}\r\n        <div ref={this.contentRef}>{this.props.children}</div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nSticky.propTypes = {\r\n  height: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Sticky\r\n","import React from 'react'\r\n\r\nimport { Flex } from 'antd-mobile'\r\n\r\nimport styles from './index.module.css'\r\n\r\n// 条件筛选栏标题数组：\r\nconst titleList = [\r\n  { title: '区域', type: 'area' },\r\n  { title: '方式', type: 'mode' },\r\n  { title: '租金', type: 'price' },\r\n  { title: '筛选', type: 'more' }\r\n]\r\n\r\nexport default function FilterTitle({ onClick, titleSelectedStatus }) {\r\n  return (\r\n    <Flex align=\"center\" className={styles.root}>\r\n      {titleList.map(item => {\r\n        // 判断当前菜单是否高亮\r\n        // titleSelectedStatus[item.type] ==> titleSelectedStatus['area'] ==> titleSelectedStatus.area ==> 布尔值\r\n        const isSelected = titleSelectedStatus[item.type]\r\n\r\n        return (\r\n          <Flex.Item key={item.type}>\r\n            {/* 选中类名： selected */}\r\n            <span\r\n              onClick={() => onClick(item.type)}\r\n              className={[\r\n                styles.dropdown,\r\n                isSelected ? styles.selected : ''\r\n              ].join(' ')}\r\n            >\r\n              <span>{item.title}</span>\r\n              <i className=\"iconfont icon-arrow\" />\r\n            </span>\r\n          </Flex.Item>\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Flex } from 'antd-mobile'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport styles from './index.module.css'\r\n\r\nfunction FilterFooter({ className, style, onCancel, onSave, cancelText }) {\r\n  return (\r\n    <Flex style={style} className={[styles.root, className || ''].join(' ')}>\r\n      {/* 取消按钮 */}\r\n      <span\r\n        className={[styles.btn, styles.cancel].join(' ')}\r\n        onClick={onCancel}\r\n      >\r\n        {cancelText}\r\n      </span>\r\n\r\n      {/* 确定按钮 */}\r\n      <span className={[styles.btn, styles.ok].join(' ')} onClick={onSave}>\r\n        确定\r\n      </span>\r\n    </Flex>\r\n  )\r\n}\r\n\r\n// props校验\r\nFilterFooter.propTypes = {\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 添加默认值\r\nFilterFooter.defaultProps = {\r\n  cancelText: '取消'\r\n}\r\n\r\nexport default FilterFooter\r\n","import React, { Component } from 'react'\r\n\r\nimport { PickerView } from 'antd-mobile'\r\n\r\nimport FilterFooter from '../../../../components/FilterFooter'\r\n\r\nexport default class FilterPicker extends Component {\r\n  state = {\r\n    // 表示：PickerView 组件的选中值\r\n    // value: null\r\n    value: this.props.defaultValue\r\n  }\r\n\r\n  /* \r\n  // 注意：该钩子函数中可以进行 setState，但是，必须要放在一个条件判断中\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(\r\n    //   '2 componentDidUpdate 更新前的：',\r\n    //   prevProps,\r\n    //   ' 更新后的：',\r\n    //   this.props\r\n    // )\r\n\r\n    // 更新前的type\r\n    const oldType = prevProps.type\r\n    const newType = this.props.type\r\n\r\n    if (oldType !== newType) {\r\n      // 说明，用户切换菜单，此时，就更新 value 即可\r\n      this.setState({\r\n        value: this.props.defaultValue\r\n      })\r\n    }\r\n  } */\r\n\r\n  // 获取选中值\r\n  handleChange = val => {\r\n    // console.log('获取 PickerView 组件的选中值：', val)\r\n    this.setState({\r\n      value: val\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onCancel, onSave, data, cols, type } = this.props\r\n    const { value } = this.state\r\n\r\n    return (\r\n      <>\r\n        {/* \r\n          选择器组件：\r\n          \r\n          注意：PickerView 组件的数据源 data ，是一个数组！\r\n          value 表示：当前组件的选中值，如果 value 有值，那么，PickerView 组件就会自动选中当前值\r\n        */}\r\n        <PickerView\r\n          data={data}\r\n          value={value}\r\n          cols={cols}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        {/* 底部按钮 */}\r\n        <FilterFooter\r\n          onCancel={() => onCancel(type)}\r\n          onSave={() => onSave(type, value)}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport FilterFooter from '../../../../components/FilterFooter'\r\n\r\nimport styles from './index.module.css'\r\n\r\nexport default class FilterMore extends Component {\r\n  state = {\r\n    // 选中值数组\r\n    selectedValues: this.props.defaultValue\r\n  }\r\n\r\n  // 标签的单击事件\r\n  handleChange = value => {\r\n    // 判断选中值数组中是否存在当前值，如果存在就移除；如果不存在就添加\r\n    const { selectedValues } = this.state\r\n    // ['ROOM|d4a692e4-a177-37fd', 'FLOOR|2']\r\n    let newSelectedValues = [...selectedValues]\r\n\r\n    if (selectedValues.indexOf(value) > -1) {\r\n      // 存在，移除\r\n      // 1 [].splice(index, 1)\r\n      // const index = selectedValues.findIndex(item => item === value)\r\n      // newSelectedValues.splice(index, 1)\r\n\r\n      // 2 [].filter()\r\n      newSelectedValues = selectedValues.filter(item => item !== value)\r\n    } else {\r\n      // 不存在，添加\r\n      newSelectedValues.push(value)\r\n    }\r\n\r\n    this.setState({\r\n      selectedValues: newSelectedValues\r\n    })\r\n  }\r\n\r\n  // 渲染标签\r\n  renderFilters(data) {\r\n    // 高亮类名： styles.tagActive\r\n    return data.map(item => {\r\n      // 判断当前菜单是否高亮\r\n      const isSelected = this.state.selectedValues.indexOf(item.value) > -1\r\n\r\n      return (\r\n        <span\r\n          key={item.value}\r\n          className={[styles.tag, isSelected ? styles.tagActive : ''].join(' ')}\r\n          onClick={() => this.handleChange(item.value)}\r\n        >\r\n          {item.label}\r\n        </span>\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      data: { roomType, oriented, floor, characteristic },\r\n      onSave,\r\n      onCancel,\r\n      type\r\n    } = this.props\r\n\r\n    const { selectedValues } = this.state\r\n\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 遮罩层 */}\r\n        <div className={styles.mask} onClick={() => onCancel(type)} />\r\n\r\n        {/* 条件内容 */}\r\n        <div className={styles.tags}>\r\n          <dl className={styles.dl}>\r\n            <dt className={styles.dt}>户型</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(roomType)}</dd>\r\n\r\n            <dt className={styles.dt}>朝向</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(oriented)}</dd>\r\n\r\n            <dt className={styles.dt}>楼层</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(floor)}</dd>\r\n\r\n            <dt className={styles.dt}>房屋亮点</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(characteristic)}</dd>\r\n          </dl>\r\n        </div>\r\n\r\n        {/* 底部按钮 */}\r\n        <FilterFooter\r\n          className={styles.footer}\r\n          cancelText=\"清除\"\r\n          onCancel={() => this.setState({ selectedValues: [] })}\r\n          onSave={() => onSave(type, selectedValues)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n// 导入动画库组件\r\nimport { Spring } from 'react-spring/renderprops'\r\n\r\nimport { API, getCurrentCity } from '../../../../utils'\r\n\r\nimport FilterTitle from '../FilterTitle'\r\nimport FilterPicker from '../FilterPicker'\r\nimport FilterMore from '../FilterMore'\r\n\r\nimport styles from './index.module.css'\r\n\r\n// 标题栏高亮状态数据\r\n// 键： 表示每个标题菜单的类型\r\n// 值： 布尔值，如果为false表示不亮；true表示高亮\r\nconst titleSelectedStatus = {\r\n  area: false,\r\n  mode: false,\r\n  price: false,\r\n  more: false\r\n}\r\n\r\n// 不同菜单的选中值状态对象\r\nconst selectedValues = {\r\n  area: ['area', 'null'],\r\n  mode: ['null'], // ['null'] === ['null'] ===> false\r\n  price: ['null'],\r\n  more: []\r\n}\r\n\r\nexport default class Filter extends Component {\r\n  state = {\r\n    // 标题栏高亮状态数据\r\n    titleSelectedStatus,\r\n    // 控制对话框展示和隐藏的状态\r\n    // openType 值为： area/mode/price ，就展示 FilterPicker 组件\r\n    // openType 值为： more ，就展示 FilterMore 组件\r\n    openType: '',\r\n\r\n    // 筛选条件数据\r\n    filtersData: {},\r\n\r\n    // 选中值状态对象\r\n    selectedValues\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // 获取到body\r\n    this.htmlBody = document.body\r\n\r\n    const { value } = await getCurrentCity()\r\n\r\n    const res = await API.get('/houses/condition', {\r\n      params: {\r\n        id: value\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      filtersData: res.data.body\r\n    })\r\n  }\r\n\r\n  /* \r\n    ① 在标题点击事件 onTitleClick 方法中，获取到两个状态：标题选中状态对象和筛选条件的选中值对象。\r\n    ② 根据当前标题选中状态对象，获取到一个新的标题选中状态对象（newTitleSelectedStatus）。\r\n    ③ 使用 Object.keys() 方法，遍历标题选中状态对象。\r\n    ④ 先判断是否为当前标题，如果是，直接让该标题选中状态为 true（高亮）。\r\n    ⑤ 否则，分别判断每个标题的选中值是否与默认值相同。\r\n    ⑥ 如果不同，则设置该标题的选中状态为 true。\r\n    ⑦ 如果相同，则设置该标题的选中状态为 false。\r\n    ⑧ 更新状态 titleSelectedStatus 的值为：newTitleSelectedStatus。\r\n  */\r\n  // 父组件中提供方法，给子组件调用\r\n  // type 表示标题的类型\r\n  onTitleClick = type => {\r\n    // console.log('展开对话框')\r\n    this.htmlBody.className = 'fixed'\r\n\r\n    // titleSelectedStatus => { area: false, mode: true, ... }\r\n    // selectedValues => { area: ['area', 'null'], mode: ['null'], ...] }\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n\r\n    // 创建新的标题选中状态对象，将来作为要更新的数据\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n\r\n    // 遍历对象\r\n    // Object.keys(titleSelectedStatus) ==> ['area', 'mode', ...]\r\n    Object.keys(titleSelectedStatus).forEach(key => {\r\n      const selectedVal = selectedValues[key]\r\n\r\n      if (key === type) {\r\n        // 当前标题\r\n        newTitleSelectedStatus[type] = true\r\n      } else {\r\n        // selectedStatus => { area: false }\r\n        const selectedStatus = this.getTitleSelectedStatus(key, selectedVal)\r\n        // 作用：将第二个参数对象中的属性拷贝到第一个参数对象中，如果是同名的属性，后面的覆盖前面\r\n        // 并且直接修改第一个参数对象的值\r\n        Object.assign(newTitleSelectedStatus, selectedStatus)\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      // 展示对话框\r\n      openType: type,\r\n\r\n      // 标题栏的高亮状态\r\n      titleSelectedStatus: newTitleSelectedStatus\r\n    })\r\n  }\r\n\r\n  // 关闭对话框\r\n  // 实现标题高亮处理，并且只处理当前标题就可以了\r\n  onCancel = type => {\r\n    // 去掉 body 中的overflow hidden\r\n    this.htmlBody.className = ''\r\n\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n\r\n    const selectedVal = selectedValues[type]\r\n\r\n    const newTitleSelectedStatus = this.getTitleSelectedStatus(\r\n      type,\r\n      selectedVal\r\n    )\r\n\r\n    this.setState({\r\n      openType: '',\r\n\r\n      // 标题高亮状态\r\n      titleSelectedStatus: {\r\n        ...titleSelectedStatus,\r\n        ...newTitleSelectedStatus\r\n      }\r\n    })\r\n  }\r\n\r\n  // 确定按钮的事件处理程序\r\n  // type 表示当前菜单的类型\r\n  // value 表示当前选中值\r\n  onSave = (type, value) => {\r\n    // 去掉 body 中的overflow hidden\r\n    this.htmlBody.className = ''\r\n\r\n    // 注意：value 才是最新的选中值；而 this.state.selectedValues 实际上是上一次的选中值\r\n    const { titleSelectedStatus } = this.state\r\n    // const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n    // 当前类型的选中值\r\n    const selectedVal = value\r\n\r\n    // 注意：该方法中返回的对象，只有一个属性！！！\r\n    // newTitleSelectedStatus => { area: true } 或者 { mode: false }\r\n    const newTitleSelectedStatus = this.getTitleSelectedStatus(\r\n      type,\r\n      selectedVal\r\n    )\r\n\r\n    /* \r\n      组装筛选条件数据：\r\n\r\n      ① 在 Filter 组件的 onSave 方法中，根据最新 selectedValues 组装筛选条件数据 filters。\r\n      ② 获取区域数据的参数名： area 或 subway（选中值数组的第一个元素）。\r\n      ③ 获取区域数据的值（以最后一个 value 为准）。\r\n      ④ 获取方式和租金的值（选中值的第一个元素）。\r\n      ⑤ 获取筛选（more）的值（将选中值数组转化为以逗号分隔的字符串）。\r\n    */\r\n\r\n    const newSelectedValues = {\r\n      ...this.state.selectedValues,\r\n      // 只更新当前类型对应的值\r\n      // price: ['PRICE|3000']\r\n      [type]: value\r\n    }\r\n\r\n    // 最终要传递给 HouseList 页面的筛选条件数据\r\n    const filters = {}\r\n    // 区域或地铁：\r\n    const area = newSelectedValues.area\r\n    const areaKey = area[0]\r\n    let areaValue\r\n    // 选中值：\r\n    // 如果数组长度为 2，那么，最后一项就是当前选中值\r\n    // 如果数组长度为 3，那么，\r\n    //            如果最后一项有值，最后一项的值就是我们要的值；\r\n    //            否则，就是倒数第二项的值\r\n    if (area.length === 2) {\r\n      areaValue = area[1]\r\n    } else {\r\n      areaValue = area[2] === 'null' ? area[1] : area[2]\r\n    }\r\n    filters[areaKey] = areaValue\r\n\r\n    // 租金：\r\n    filters.price = newSelectedValues.price[0]\r\n\r\n    filters.price = filters.price.replace('PRICE|', '')\r\n\r\n    // 方式：\r\n    filters.rentType = newSelectedValues.mode[0]\r\n    // 更多筛选条件：\r\n    filters.more = newSelectedValues.more.join(',')\r\n\r\n    // console.log('组装的筛选条件数据：', filters)\r\n    // 调用父组件的 onFilter 方法，将所有筛选条件数据，传递给父组件\r\n    this.props.onFilter(filters)\r\n\r\n    this.setState({\r\n      openType: '',\r\n\r\n      titleSelectedStatus: {\r\n        ...titleSelectedStatus,\r\n        ...newTitleSelectedStatus\r\n      },\r\n\r\n      // 更新每个菜单的选中值\r\n      selectedValues: newSelectedValues\r\n    })\r\n  }\r\n\r\n  // 封装菜单高亮的逻辑判断代码\r\n  getTitleSelectedStatus(type, selectedVal) {\r\n    // 因为我们要修改 newTitleSelectedStatus，所以，直接在该方法中创建这个对象\r\n    // 然后，修改。最后，将修改后的对象返回即可。\r\n    // 注意：最好不要修改参数！！！\r\n    let newTitleSelectedStatus = {}\r\n\r\n    if (\r\n      type === 'area' &&\r\n      (selectedVal.length === 3 || selectedVal[0] !== 'area')\r\n    ) {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'mode' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'price' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'more' && selectedVal.length > 0) {\r\n      // 高亮\r\n      // 后面实现了 FilterMore 组件后，再补充\r\n      newTitleSelectedStatus[type] = true\r\n    } else {\r\n      // 不高亮\r\n      newTitleSelectedStatus[type] = false\r\n    }\r\n\r\n    return newTitleSelectedStatus\r\n  }\r\n\r\n  // 渲染 FilterPicker 组件\r\n  renderFilterPicker() {\r\n    const {\r\n      openType,\r\n      filtersData: { area, subway, rentType, price },\r\n      selectedValues\r\n    } = this.state\r\n\r\n    if (openType !== 'area' && openType !== 'mode' && openType !== 'price') {\r\n      return null\r\n    }\r\n\r\n    // FilterPciker 组件需要的数据\r\n    // cols 表示 PickerView 组件的列数\r\n    let data\r\n    let cols = 1\r\n    // openType ==> area\r\n    // selectedValues[openType] ==> selectedValues.area ==> ['area', 'null']\r\n    let defaultValue = selectedValues[openType]\r\n\r\n    switch (openType) {\r\n      case 'area':\r\n        cols = 3\r\n        data = [area, subway]\r\n        break\r\n      case 'mode':\r\n        data = rentType\r\n        break\r\n      case 'price':\r\n        data = price\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    return (\r\n      <FilterPicker\r\n        key={openType}\r\n        defaultValue={defaultValue}\r\n        type={openType}\r\n        data={data}\r\n        cols={cols}\r\n        onSave={this.onSave}\r\n        onCancel={this.onCancel}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 渲染 FilterMore 组件\r\n  renderFilterMore() {\r\n    const {\r\n      openType,\r\n      selectedValues,\r\n      filtersData: { roomType, oriented, floor, characteristic }\r\n    } = this.state\r\n\r\n    if (openType !== 'more') {\r\n      return null\r\n    }\r\n\r\n    // 组装数据\r\n    const data = {\r\n      roomType,\r\n      oriented,\r\n      floor,\r\n      characteristic\r\n    }\r\n\r\n    // 当前选中值\r\n    const defaultValue = selectedValues.more\r\n\r\n    return (\r\n      <FilterMore\r\n        defaultValue={defaultValue}\r\n        type={openType}\r\n        data={data}\r\n        onSave={this.onSave}\r\n        onCancel={this.onCancel}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 渲染遮罩层\r\n  renderMask() {\r\n    const { openType } = this.state\r\n\r\n    // 判断遮罩层是否隐藏\r\n    const isHide =\r\n      openType !== 'area' && openType !== 'mode' && openType !== 'price'\r\n\r\n    // if (openType !== 'area' && openType !== 'mode' && openType !== 'price') {\r\n    //   return null\r\n    // }\r\n\r\n    // 因为我们为了实现动画效果，需要一直渲染 Spring 组件。\r\n    // 但是，我们不希望进入页面时，就展示 遮罩层 ，所以， to 属性的值默认应该为 opacity: 0\r\n    // 当打开遮罩层的时候，让 to 属性中 opacity 的值变为 1 即可\r\n\r\n    // 第一次：从 from 的 0 --> to 的1\r\n    // 第二次：从 to 的 1（旧状态） --> to 的 0（新状态）\r\n    // 以后的每一次都是 旧to 到 新to\r\n    return (\r\n      // <Spring from={{ opacity: 0 }} to={{ opacity: isHide ? 0 : 1 }}>\r\n      <Spring to={{ opacity: isHide ? 0 : 1 }}>\r\n        {props => {\r\n          // 如果遮罩层是隐藏的，就不渲染 遮罩层 元素。这样就可以解决遮挡无法点击页面顶部导航栏按钮的bug了\r\n          if (props.opacity === 0) {\r\n            return null\r\n          }\r\n\r\n          return (\r\n            <div\r\n              style={props}\r\n              className={styles.mask}\r\n              onClick={() => this.onCancel(openType)}\r\n            />\r\n          )\r\n        }}\r\n      </Spring>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { titleSelectedStatus } = this.state\r\n\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 前三个菜单的遮罩层 */}\r\n\r\n        {this.renderMask()}\r\n\r\n        <div className={styles.content}>\r\n          {/* 标题栏 */}\r\n          <FilterTitle\r\n            onClick={this.onTitleClick}\r\n            titleSelectedStatus={titleSelectedStatus}\r\n          />\r\n\r\n          {/* 前三个菜单对应的内容： */}\r\n          {this.renderFilterPicker()}\r\n\r\n          {/* 最后一个菜单对应的内容： */}\r\n          {this.renderFilterMore()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { Flex, Toast } from 'antd-mobile'\r\n\r\n// import {\r\n//   List,\r\n//   AutoSizer,\r\n//   WindowScroller,\r\n//   InfiniteLoader\r\n// } from 'react-virtualized'\r\n\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\nimport WindowScroller from 'react-virtualized/dist/commonjs/WindowScroller'\r\nimport InfiniteLoader from 'react-virtualized/dist/commonjs/InfiniteLoader'\r\n\r\n// 导入获取当前定位城市的方法\r\nimport { getCurrentCity, API } from '../../utils'\r\n\r\n// 导入顶部搜索导航栏组件\r\nimport SearchHeader from '../../components/SearchHeader'\r\nimport HouseItem from '../../components/HouseItem'\r\nimport Sticky from '../../components/Sticky'\r\nimport NoHouse from '../../components/NoHouse'\r\n\r\n// 导入 条件筛选栏组件\r\nimport Filter from './components/Filter'\r\n\r\n// 导入样式\r\nimport styles from './index.module.scss'\r\n\r\nexport default class HouseList extends React.Component {\r\n  state = {\r\n    label: '',\r\n    // 房源列表数据\r\n    list: [],\r\n    // 房源数量\r\n    count: 0,\r\n    // 数据是否加载完成\r\n    isLoaded: false\r\n  }\r\n\r\n  componentWillMount () {\r\n\r\n    this.filters.rentType = false\r\n\r\n    const rentType = !!this.props.location.search\r\n\r\n    if(rentType) this.filters.rentType = rentType\r\n  }\r\n\r\n  // 初始化 filters 数据\r\n  filters = {}\r\n\r\n  async componentDidMount() {\r\n    // 当前定位城市名称\r\n    const { label, value } = await getCurrentCity()\r\n    this.value = value\r\n\r\n    this.searchHouseList()\r\n\r\n    this.setState({\r\n      label\r\n    })\r\n  }\r\n\r\n  // 获取 Filter 组件中组装好的筛选条件数据\r\n  // 注意：这个方法就是在 条件筛选栏组件 中点击确定按钮的时候执行的\r\n  onFilter = filters => {\r\n    // console.log('此时应该回到页面顶部')\r\n    // 回到页面顶部\r\n    window.scrollTo(0, 0)\r\n\r\n    this.filters = filters\r\n\r\n    this.searchHouseList()\r\n  }\r\n\r\n  // 根据条件获取房源列表数据\r\n  async searchHouseList(props) {\r\n    // 开启loading\r\n    Toast.loading('加载中...', 0, null, false)\r\n\r\n    // 因为该方法在每次修改搜索条件的时候，都会重新调用，所以，应该在每次调用前，都要将 isLoaded 设置为false\r\n    // 表示本次查询，数据还没有加载完成！\r\n    this.setState({\r\n      isLoaded: false\r\n    })\r\n\r\n    const res = await API.get('/houses', {\r\n      params: {\r\n        cityId: this.value,\r\n        ...this.filters,\r\n        start: 1,\r\n        end: 20\r\n      }\r\n    })\r\n\r\n    // 关闭loading\r\n    Toast.hide()\r\n\r\n    const { list, count } = res.data.body\r\n\r\n    // 提示找到的房源数量\r\n    if (count !== 0) {\r\n      Toast.info(`共找到 ${count} 套房源`, 2, null, false)\r\n    }\r\n\r\n    this.setState({\r\n      list,\r\n      count,\r\n      // 数据加载完成\r\n      isLoaded: true\r\n    })\r\n  }\r\n\r\n  // 渲染房源列表\r\n  renderHouseItems = ({ key, index, style }) => {\r\n    // console.log('当前渲染的索引号为：', index)\r\n\r\n    const { list } = this.state\r\n    const item = list[index]\r\n\r\n    // 处理 item 不存在时，导致 组件内部数据加载报错的bug：\r\n    if (!item) {\r\n      // 此时，说明 item 项还没有加载完成，我们加载 loading\r\n      return (\r\n        <div key={key} style={style}>\r\n          <p className={styles.loading} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // key 表示唯一标识\r\n    // style 注意：一定要传递给组件，并且组件中一定要接收并使用！！！\r\n    return <HouseItem key={key} style={style} {...item} />\r\n  }\r\n\r\n  // 无限滚动列表数据是否加载完成\r\n  isRowLoaded = ({ index }) => {\r\n    return !!this.state.list[index]\r\n  }\r\n\r\n  // 无限滚动列表用来加载更多数据的方法\r\n  loadMoreRows = ({ startIndex, stopIndex }) => {\r\n    // console.log('起始索引号：', startIndex, '结束索引号：', stopIndex)\r\n\r\n    return new Promise(async resolve => {\r\n      // 这个方法用来加载更多数据，是由 InfiniteLoader 组件自己主动调用的\r\n      // 我们需要在此处发送请求，根据 startIndex 和 stopIndex 来加载更多数据\r\n      const res = await API.get('/houses', {\r\n        params: {\r\n          cityId: this.value,\r\n          ...this.filters,\r\n          start: startIndex,\r\n          end: stopIndex\r\n        }\r\n      })\r\n\r\n      // 数据加载完成时，让当前 Promise 完成\r\n      resolve()\r\n      // 注意：拿到下一页的数据应该是追加数据，而不是替换 list 数据！！\r\n      // console.log('加载了更多数据：', res)\r\n      this.setState({\r\n        list: [...this.state.list, ...res.data.body.list]\r\n      })\r\n    })\r\n  }\r\n\r\n  // 渲染房源列表\r\n  renderHouseList() {\r\n    const { count, isLoaded } = this.state\r\n\r\n    // 注意：因为 count 默认值为 0 ，所以，进入页面时，就会展示 没有房源 的提示！\r\n    // 需求：进入页面时，先不要展示 没有房源 的提示。而是等到，数据加载完成后，如果 count 为0，再展示 没有房源 的提示\r\n    // 解决：添加 数据加载完成的状态，使用该状态 和 !count 一起来决定是否展示 没有房源的提示\r\n    if (isLoaded && !count) {\r\n      // 没有房源\r\n      return <NoHouse>没有找到房源，请您换个搜索条件吧~</NoHouse>\r\n    }\r\n\r\n    return (\r\n      <InfiniteLoader\r\n        isRowLoaded={this.isRowLoaded}\r\n        loadMoreRows={this.loadMoreRows}\r\n        rowCount={count}\r\n      >\r\n        {({ onRowsRendered, registerChild }) => (\r\n          <WindowScroller>\r\n            {({ height, isScrolling, scrollTop }) => {\r\n              // console.log('WindowScroller：', height, scrollTop)\r\n              return (\r\n                <AutoSizer>\r\n                  {({ width }) => (\r\n                    <List\r\n                      autoHeight\r\n                      height={height}\r\n                      isScrolling={isScrolling}\r\n                      scrollTop={scrollTop}\r\n                      width={width}\r\n                      rowCount={count}\r\n                      rowHeight={120}\r\n                      rowRenderer={this.renderHouseItems}\r\n                      onRowsRendered={onRowsRendered}\r\n                      ref={registerChild}\r\n                    />\r\n                  )}\r\n                </AutoSizer>\r\n              )\r\n            }}\r\n          </WindowScroller>\r\n        )}\r\n      </InfiniteLoader>\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    const { history } = this.props\r\n\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 顶部搜索导航栏 */}\r\n        <Flex className={styles.searchHeader}>\r\n          <i className=\"iconfont icon-back\" onClick={history.goBack} />\r\n          <SearchHeader\r\n            cityName={this.state.label}\r\n            className={styles.houseSearchHeader}\r\n          />\r\n        </Flex>\r\n\r\n        {/* 条件筛选栏组件 */}\r\n        {/* 使用 Sticky 组件包裹 Filter 组件，那么，Filter组件就会实现吸顶效果了 */}\r\n        <Sticky height={40}>\r\n          <Filter onFilter={this.onFilter} />\r\n        </Sticky>\r\n\r\n        {/* 房源列表 */}\r\n        <div className=\"abc\">{this.renderHouseList()}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}