{"version":3,"sources":["components/AuthRoute/index.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"names":["AuthRoute","_ref","Component","component","rest","source","excluded","key","i","target","Object","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","_objectWithoutProperties","react_default","a","createElement","react_router","assign","render","props","isAuth","to","pathname","state","from","location"],"mappings":"kJAkDeA,UA9BG,SAAAC,GAAuC,IAAzBC,EAAyBD,EAApCE,UAAyBC,ECnB/B,SAAAC,EAAAC,GACf,SAAAD,EAAA,SACA,IACAE,EAAAC,EADAC,EAAeC,OAAAC,EAAA,QAAAD,CAA4BL,EAAAC,GAG3C,GAAAI,OAAAE,sBAAA,CACA,IAAAC,EAAAH,OAAAE,sBAAAP,GAEA,IAAAG,EAAA,EAAeA,EAAAK,EAAAC,OAA6BN,IAC5CD,EAAAM,EAAAL,GACAF,EAAAS,QAAAR,IAAA,GACAG,OAAAM,UAAAC,qBAAAC,KAAAb,EAAAE,KACAE,EAAAF,GAAAF,EAAAE,IAIA,OAAAE,EDGyDU,CAAAlB,EAAA,eAEvD,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAADb,OAAAc,OAAA,GACMpB,EADN,CAEEqB,OAAQ,SAAAC,GAIN,OAAIC,cAEKP,EAAAC,EAAAC,cAACpB,EAAcwB,GAIpBN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEK,GAAI,CAEFC,SAAU,SAEVC,MAAO,CAAEC,KAAML,EAAMM","file":"static/js/20.763b6002.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nimport { isAuth } from '../../utils'\r\n\r\n/* \r\n  ① 在 components 目录中创建 AuthRoute/index.js 文件。\r\n  ② 创建组件 AuthRoute 并导出。\r\n  ③ 在 AuthRoute 组件中返回 Route 组件（在 Route 基础上做了一层包装，用于实现自定义功能）。\r\n  ④ 给 Route 组件，添加 render 方法，指定该组件要渲染的内容（类似于 component 属性）。\r\n  ⑤ 在 render 方法中，调用 isAuth() 判断是否登录。\r\n  ⑥ 如果登录了，就渲染当前组件（通过参数 component 获取到要渲染的组件，需要重命名）。\r\n  ⑦ 如果没有登录，就重定向到登录页面，并且指定登录成功后要跳转到的页面路径。\r\n  ⑧ 将 AuthRoute 组件接收到的 props 原样传递给 Route 组件（保证与 Route 组件使用方式相同）。\r\n  ⑨ 使用 AuthRoute 组件配置路由规则，验证能否实现页面的登录访问控制。\r\n\r\n  使用：\r\n  <AuthRoute path=\"/rent\" component={Rent} />\r\n*/\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  // ...rest 表示剩余参数，也就是除了 component 以外，所有传递给 AuthRoute 的属性\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        // props 表示当前路由信息\r\n        // console.log('AuthRoute 组件：', props)\r\n\r\n        if (isAuth()) {\r\n          // 登录\r\n          return <Component {...props} />\r\n        } else {\r\n          // 没有登录\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                // 指定要重定向的页面路径，也就是登录页面\r\n                pathname: '/login',\r\n                // state 表示：用来指定在路由跳转时额外传递的一些数据\r\n                state: { from: props.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}