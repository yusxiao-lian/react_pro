{"version":3,"sources":["components/NavHeader/index.js","../node_modules/antd-mobile/lib/nav-bar/style/css.js","../node_modules/antd-mobile/lib/nav-bar/index.js","components/NavHeader/index.module.scss","pages/CityList/index.js"],"names":["withRouter","_ref","children","history","className","rightContent","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","antd_mobile_lib_nav_bar__WEBPACK_IMPORTED_MODULE_1___default","styles","navBar","join","mode","icon","onLeftClick","go","__webpack_require__","Object","defineProperty","exports","value","_extends3","_interopRequireDefault","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_classnames2","React","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","_interopRequireWildcard","default","__rest","s","e","t","p","indexOf","getOwnPropertySymbols","i","length","NavBar","_React$Component","this","__proto__","getPrototypeOf","apply","arguments","_a","props","prefixCls","leftContent","restProps","role","onClick","aria-hidden","Component","defaultProps","module","formatCityList","list","cityList","forEach","item","first","short","substr","push","cityIndex","keys","sort","formatCity","letter","toUpperCase","CITY_INDEX_HEIGHT","CITY_NAME_HEIGHT","CITY_WITH_HOUSES","CityList","state","activeIndex","listRef","createRef","rowRenderer","index","style","_this$state","_this","react__WEBPACK_IMPORTED_MODULE_9___default","map","label","setCity","antd_mobile_lib_toast__WEBPACK_IMPORTED_MODULE_3___default","info","calcRowHeight","_ref2","_this$state2","onRowsRendered","_ref3","startIndex","setState","getCityList","API","get","res","data","body","hotRes","unshift","getCurrentCity","curCity","_this2","current","measureAllRows","_this3","_this$state3","scrollToRow","_this4","_components_NavHeader__WEBPACK_IMPORTED_MODULE_12__","react_virtualized_dist_commonjs_AutoSizer__WEBPACK_IMPORTED_MODULE_11___default","_ref4","height","width","react_virtualized_dist_commonjs_List__WEBPACK_IMPORTED_MODULE_10___default","ref","rowCount","rowHeight","scrollToAlignment","renderCityIndex"],"mappings":"kKAkCeA,gBAtBG,SAAAC,GAAoD,IAAjDC,EAAiDD,EAAjDC,SAAUC,EAAuCF,EAAvCE,QAASC,EAA8BH,EAA9BG,UAAWC,EAAmBJ,EAAnBI,aACjD,OACEC,EAAAC,EAAAC,cAAAC,EAAAF,EAAA,CACEH,UAAW,CAACM,IAAOC,OAAQP,GAAWQ,KAAK,KAC3CC,KAAK,QACLC,KAAMR,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,uBACnBW,YAAa,kBAAMZ,EAAQa,IAAI,IAC/BX,aAAcA,GAEbH,uCCnBPe,EAAQ,IAERA,EAAQ,6DCFRC,OAAAC,eAAAC,EAAA,cACAC,OAAA,IAGA,IAEAC,EAAAC,EAFgBN,EAAQ,IAMxBO,EAAAD,EAFuBN,EAAQ,IAM/BQ,EAAAF,EAFoBN,EAAQ,IAM5BS,EAAAH,EAFkCN,EAAQ,IAM1CU,EAAAJ,EAFiBN,EAAQ,IAMzBW,EAAAL,EAFkBN,EAAQ,KAM1BY,EAEA,SAAAC,GACA,GAAAA,KAAAC,WACA,OAAAD,EAEA,IAAAE,EAAA,GAEA,SAAAF,EACA,QAAAG,KAAAH,EACAZ,OAAAgB,UAAAC,eAAAC,KAAAN,EAAAG,KAAAD,EAAAC,GAAAH,EAAAG,IAKA,OADAD,EAAA,QAAAF,EACAE,EAfAK,CAFapB,EAAQ,IAqBrB,SAAAM,EAAAO,GACA,OAAAA,KAAAC,WAAAD,EAAA,CACAQ,QAAAR,GAIA,IAAAS,EAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,GAEA,QAAAC,KAAAH,EACAtB,OAAAgB,UAAAC,eAAAC,KAAAI,EAAAG,IAAAF,EAAAG,QAAAD,GAAA,IAAAD,EAAAC,GAAAH,EAAAG,IAGA,SAAAH,GAAA,oBAAAtB,OAAA2B,sBAAA,KAAAC,EAAA,MAAAH,EAAAzB,OAAA2B,sBAAAL,GAA2HM,EAAAH,EAAAI,OAAcD,IACzIL,EAAAG,QAAAD,EAAAG,IAAA,IAAAJ,EAAAC,EAAAG,IAAAN,EAAAG,EAAAG,KAEA,OAAAJ,GAGAM,EAAA,SAAAC,GAGA,SAAAD,IAEA,OADA,EAAAxB,EAAA,SAAA0B,KAAAF,IACA,EAAAtB,EAAA,SAAAwB,MAAAF,EAAAG,WAAAjC,OAAAkC,eAAAJ,IAAAK,MAAAH,KAAAI,YAkCA,OAtCA,EAAA3B,EAAA,SAAAqB,EAAAC,IAOA,EAAAxB,EAAA,SAAAuB,EAAA,EACAf,IAAA,SACAZ,MAAA,WACA,IAAAkC,EAAAL,KAAAM,MACAC,EAAAF,EAAAE,UACArD,EAAAmD,EAAAnD,UACAF,EAAAqD,EAAArD,SACAW,EAAA0C,EAAA1C,KACAC,EAAAyC,EAAAzC,KACAC,EAAAwC,EAAAxC,YACA2C,EAAAH,EAAAG,YACArD,EAAAkD,EAAAlD,aACAsD,EAAApB,EAAAgB,EAAA,+FAEA,OAAA1B,EAAArB,cAAA,SAAAc,EAAA,YAAoEqC,EAAA,CACpEvD,WAAA,EAAAwB,EAAA,SAAAxB,EAAAqD,IAAA,IAAA5C,KACOgB,EAAArB,cAAA,OACPJ,UAAAqD,EAAA,QACAG,KAAA,SACAC,QAAA9C,GACOD,EACPe,EAAArB,cAAA,QACAJ,UAAAqD,EAAA,aACAK,cAAA,QACOhD,GAAA,KAAA4C,GAAA7B,EAAArB,cAAA,OACPJ,UAAAqD,EAAA,UACOvD,GAAA2B,EAAArB,cAAA,OACPJ,UAAAqD,EAAA,UACOpD,QAGP2C,EAvCA,CAwCCnB,EAAAkC,WAED3C,EAAA,QAAA4B,EACAA,EAAAgB,aAAA,CACAP,UAAA,YACA5C,KAAA,OACAE,YAAA,cAEAkD,EAAA7C,UAAA,6BCrHA6C,EAAA7C,QAAA,CAAkBT,OAAA,qSCqBZuD,UAAiB,SAAAC,GACrB,IAAMC,EAAW,GAQjBD,EAAKE,QAAQ,SAAAC,GAEX,IAAMC,EAAQD,EAAKE,MAAMC,OAAO,EAAG,GAK/BF,KAASH,EAEXA,EAASG,GAAOG,KAAKJ,GAGrBF,EAASG,GAAS,CAACD,KAOvB,IAAMK,EAAYzD,OAAO0D,KAAKR,GAAUS,OAExC,MAAO,CACLT,WACAO,eAKEG,EAAa,SAAAC,GACjB,OAAQA,GACN,IAAK,IACH,MAAO,2BACT,IAAK,MACH,MAAO,2BACT,QACE,OAAOA,EAAOC,gBAKdC,EAAoB,GAEpBC,EAAmB,GAEnBC,EAAmB,CAAC,eAAM,eAAM,eAAM,gBAEvBC,6MACnBC,MAAQ,CAENjB,SAAU,GAEVO,UAAW,GAEXW,YAAa,KAIfC,QAAU1D,IAAM2D,cAgDhBC,YAAc,SAAAxF,GAA2B,IAAxBgC,EAAwBhC,EAAxBgC,IAAKyD,EAAmBzF,EAAnByF,MAAOC,EAAY1F,EAAZ0F,MAAYC,EAEPC,EAAKR,MAA7BV,EAF+BiB,EAE/BjB,UAAWP,EAFoBwB,EAEpBxB,SACbW,EAASJ,EAAUe,GAEzB,OACEI,EAAAvF,EAAAC,cAAA,OAAKyB,IAAKA,EAAK0D,MAAOA,EAAOvF,UAAU,QACrC0F,EAAAvF,EAAAC,cAAA,OAAKJ,UAAU,SAAS0E,EAAWC,IAClCX,EAASW,GAAQgB,IAAI,SAAAzB,GAAI,OACxBwB,EAAAvF,EAAAC,cAAA,OACEyB,IAAKqC,EAAKjD,MACVjB,UAAU,OACVyD,QAAS,WACHsB,EAAiBvC,QAAQ0B,EAAK0B,QAAU,GAG1CC,YAAQ,CAAED,MAAO1B,EAAK0B,MAAO3E,MAAOiD,EAAKjD,QAEzCwE,EAAKrC,MAAMrD,QAAQa,IAAI,IAGvBkF,EAAA3F,EAAM4F,KAAK,yDAAa,EAAG,MAAM,KAIpC7B,EAAK0B,aAQhBI,cAAgB,SAAAC,GAAe,IAAZX,EAAYW,EAAZX,MAAYY,EACGT,EAAKR,MAA7BV,EADqB2B,EACrB3B,UAAWP,EADUkC,EACVlC,SAEbW,EAASJ,EAAUe,GAOzB,OAAOT,EAAoBC,EAAmBd,EAASW,GAAQhC,UA2BjEwD,eAAiB,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,WAEdA,IAAeZ,EAAKR,MAAMC,aAC5BO,EAAKa,SAAS,CACZpB,YAAamB,wFAjHjBvD,KAAKyD,mMAKaC,IAAIC,IAAI,oCAApBC,WAI0B5C,EAAe4C,EAAIC,KAAKC,MAAhD5C,aAAUO,uBAGGiC,IAAIC,IAAI,2BAAvBI,SAENtC,EAAUuC,QAAQ,OAClB9C,EAAQ,IAAU6C,EAAOF,KAAKC,eAKRG,sBAAhBC,SACNzC,EAAUuC,QAAQ,KAClB9C,EAAS,KAAO,CAACgD,GAGjBlE,KAAKwD,SACH,CACEtC,WACAO,aAGF,WAEE0C,EAAK9B,QAAQ+B,QAAQC,gKAqDT,IAAAC,EAAAtE,KAAAuE,EACmBvE,KAAKmC,MAAhCV,EADQ8C,EACR9C,UAAWW,EADHmC,EACGnC,YAEnB,OAAOX,EAAUoB,IAAI,SAACzB,EAAMoB,GAAP,OACnBI,EAAAvF,EAAAC,cAAA,MACEyB,IAAKqC,EACLlE,UAAU,kBACVyD,QAAS,WAKP2D,EAAKjC,QAAQ+B,QAAQI,YAAYhC,KAGnCI,EAAAvF,EAAAC,cAAA,QAAMJ,UAAWkF,IAAgBI,EAAQ,eAAiB,IAC9C,QAATpB,EAAiB,SAAMA,EAAKU,mDAgB5B,IAAA2C,EAAAzE,KACP,OACE4C,EAAAvF,EAAAC,cAAA,OAAKJ,UAAU,YAEb0F,EAAAvF,EAAAC,cAACoH,EAAA,EAAD,iCAUA9B,EAAAvF,EAAAC,cAACqH,EAAAtH,EAAD,KACG,SAAAuH,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,MAAX,OACClC,EAAAvF,EAAAC,cAACyH,EAAA1H,EAAD,CACE2H,IAAKP,EAAKpC,QACVyC,MAAOA,EACPD,OAAQA,EACRI,SAAUR,EAAKtC,MAAMV,UAAU5B,OAC/BqF,UAAWT,EAAKvB,cAChBX,YAAakC,EAAKlC,YAClBc,eAAgBoB,EAAKpB,eACrB8B,kBAAkB,YAMxBvC,EAAAvF,EAAAC,cAAA,MAAIJ,UAAU,cAAc8C,KAAKoF,2BAxKHzG,IAAMkC","file":"static/js/15.3c13549e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { NavBar } from 'antd-mobile'\r\n\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n// 添加属性校验\r\nimport PropTypes from 'prop-types'\r\n\r\n// 导入样式\r\nimport styles from './index.module.scss'\r\n\r\nconst NavHeader = ({ children, history, className, rightContent }) => {\r\n  return (\r\n    <NavBar\r\n      className={[styles.navBar, className].join(' ')}\r\n      mode=\"light\"\r\n      icon={<i className=\"iconfont icon-back\" />}\r\n      onLeftClick={() => history.go(-1)}\r\n      rightContent={rightContent}\r\n    >\r\n      {children}\r\n    </NavBar>\r\n  )\r\n}\r\n\r\n// 添加属性校验\r\nNavHeader.propTypes = {\r\n  // 约定 children 是字符串类型，并且为必填项\r\n  children: PropTypes.string.isRequired,\r\n  className: PropTypes.string,\r\n  rightContent: PropTypes.array\r\n}\r\n\r\nexport default withRouter(NavHeader)\r\n","'use strict';\n\nrequire('../../style/css');\n\nrequire('./index.css');","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar NavBar = function (_React$Component) {\n  (0, _inherits3['default'])(NavBar, _React$Component);\n\n  function NavBar() {\n    (0, _classCallCheck3['default'])(this, NavBar);\n    return (0, _possibleConstructorReturn3['default'])(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).apply(this, arguments));\n  }\n\n  (0, _createClass3['default'])(NavBar, [{\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          className = _a.className,\n          children = _a.children,\n          mode = _a.mode,\n          icon = _a.icon,\n          onLeftClick = _a.onLeftClick,\n          leftContent = _a.leftContent,\n          rightContent = _a.rightContent,\n          restProps = __rest(_a, [\"prefixCls\", \"className\", \"children\", \"mode\", \"icon\", \"onLeftClick\", \"leftContent\", \"rightContent\"]);\n\n      return React.createElement('div', (0, _extends3['default'])({}, restProps, {\n        className: (0, _classnames2['default'])(className, prefixCls, prefixCls + '-' + mode)\n      }), React.createElement('div', {\n        className: prefixCls + '-left',\n        role: 'button',\n        onClick: onLeftClick\n      }, icon ? // tslint:disable-next-line:jsx-no-multiline-js\n      React.createElement('span', {\n        className: prefixCls + '-left-icon',\n        'aria-hidden': 'true'\n      }, icon) : null, leftContent), React.createElement('div', {\n        className: prefixCls + '-title'\n      }, children), React.createElement('div', {\n        className: prefixCls + '-right'\n      }, rightContent));\n    }\n  }]);\n  return NavBar;\n}(React.Component);\n\nexports['default'] = NavBar;\nNavBar.defaultProps = {\n  prefixCls: 'am-navbar',\n  mode: 'dark',\n  onLeftClick: function onLeftClick() {}\n};\nmodule.exports = exports['default'];","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavHeader_navBar__UggGR\"};","import React from 'react'\r\n\r\n// import axios from 'axios'\r\n\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入 react-virtualized 组件库中的 List 组件\r\n// import { List, AutoSizer } from 'react-virtualized'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\n\r\n// 导入顶部导航栏组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\n// 导入获取当前定位城市的方法\r\nimport { getCurrentCity, setCity, API } from '../../utils'\r\n// import { setCity } from '../../utils/city'\r\n\r\nimport './index.scss'\r\n\r\n// 封装一个方法，格式化城市列表数据\r\n// list => [{}, {}, {}, ...]\r\nconst formatCityList = list => {\r\n  const cityList = {}\r\n  // const cityIndex = []\r\n\r\n  // 1 遍历 list 数组\r\n  // 2 拿到每一个城市的首字母\r\n  // 3 判断 cityList 对象中，是否包含该字母索引\r\n  // 4 如果没有，就给 cityList 添加键（当前字母索引），值是一个数组，并且要把当前城市信息添加到该数组中\r\n  // 5 如果有，直接添加到该索引对应的数组中即可\r\n  list.forEach(item => {\r\n    // 2 拿到每一个城市的首字母\r\n    const first = item.short.substr(0, 1)\r\n\r\n    // 3 判断 cityList 对象中，是否包含该字母索引\r\n    // if (cityList[first])\r\n    // 只要 cityList 对象中，能够访问到 first 属性，结果就为：true\r\n    if (first in cityList) {\r\n      // 5 如果有，直接添加到该索引对应的数组中即可\r\n      cityList[first].push(item)\r\n    } else {\r\n      // 4 如果没有，就给 cityList 添加键（当前字母索引），值是一个数组，并且要把当前城市信息添加到该数组中\r\n      cityList[first] = [item]\r\n    }\r\n  })\r\n\r\n  // 根据 cityList 对象，获取到所有的城市列表索引：\r\n  // cityList: { a: [], b: [], c: [], ... } ===> ['a', 'b', 'c', ...]\r\n  // Object.keys() 作用：获取对象中所有的键，返回一个数组\r\n  const cityIndex = Object.keys(cityList).sort()\r\n\r\n  return {\r\n    cityList,\r\n    cityIndex\r\n  }\r\n}\r\n\r\n// 封装格式化城市列表中每一行索引\r\nconst formatCity = letter => {\r\n  switch (letter) {\r\n    case '#':\r\n      return '当前定位'\r\n    case 'hot':\r\n      return '热门城市'\r\n    default:\r\n      return letter.toUpperCase()\r\n  }\r\n}\r\n\r\n// 城市列表索引高度\r\nconst CITY_INDEX_HEIGHT = 36\r\n// 城市列表中每一个城市名称的高度\r\nconst CITY_NAME_HEIGHT = 50\r\n// 有房源城市列表：\r\nconst CITY_WITH_HOUSES = ['北京', '上海', '广州', '深圳']\r\n\r\nexport default class CityList extends React.Component {\r\n  state = {\r\n    // 城市按首字母分类后的列表\r\n    cityList: {},\r\n    // 城市首字母索引列表\r\n    cityIndex: [],\r\n    // 高亮索引\r\n    activeIndex: 0\r\n  }\r\n\r\n  // 创建ref对象\r\n  listRef = React.createRef()\r\n\r\n  /* async componentDidMount() {\r\n    await this.getCityList()\r\n\r\n    // 手动计算 List 组件中所有行的高度\r\n    this.listRef.current.measureAllRows()\r\n  } */\r\n  componentDidMount() {\r\n    this.getCityList()\r\n  }\r\n\r\n  // 获取城市列表数据\r\n  async getCityList() {\r\n    const res = await API.get('/area/city?level=1')\r\n\r\n    // cityList -> 城市列表： { a: [], b: [], ... }\r\n    // cityIndex -> 城市索引：['a', 'b', ...]\r\n    const { cityList, cityIndex } = formatCityList(res.data.body)\r\n\r\n    // 获取热门城市数据，并添加到列表中\r\n    const hotRes = await API.get('/area/hot')\r\n    // hot 是我们约定的标志，将来再替换成对应的展示的名称即可\r\n    cityIndex.unshift('hot')\r\n    cityList['hot'] = hotRes.data.body\r\n\r\n    // 获取当前定位城市数据\r\n    // curCity: { label: '', value: '' }\r\n    // 因为 getCurrentCity() 方法返回的是一个 Promise，所以，此处，直接使用 await 来等待这个异步操作的结果接口。也就是说：curCity 拿到的就是 .then() 中获取到的结果\r\n    const curCity = await getCurrentCity()\r\n    cityIndex.unshift('#')\r\n    cityList['#'] = [curCity]\r\n\r\n    // console.log('城市列表数据：', cityList, cityIndex)\r\n    this.setState(\r\n      {\r\n        cityList,\r\n        cityIndex\r\n      },\r\n      // 这个回调函数，会在 state 更新完成后，立即执行\r\n      () => {\r\n        // 手动计算 List 组件中所有行的高度\r\n        this.listRef.current.measureAllRows()\r\n      }\r\n    )\r\n  }\r\n\r\n  // 该函数，用来渲染List列表中的每一行内容\r\n  rowRenderer = ({ key, index, style }) => {\r\n    // 注意：一定要给每一行添加 style 样式！！！\r\n    const { cityIndex, cityList } = this.state\r\n    const letter = cityIndex[index]\r\n\r\n    return (\r\n      <div key={key} style={style} className=\"city\">\r\n        <div className=\"title\">{formatCity(letter)}</div>\r\n        {cityList[letter].map(item => (\r\n          <div\r\n            key={item.value}\r\n            className=\"name\"\r\n            onClick={() => {\r\n              if (CITY_WITH_HOUSES.indexOf(item.label) > -1) {\r\n                // console.log('有房源')\r\n                // 保存当前定位城市数据\r\n                setCity({ label: item.label, value: item.value })\r\n                // 返回上一页\r\n                this.props.history.go(-1)\r\n              } else {\r\n                // console.log('没有')\r\n                Toast.info('该城市暂无房源数据', 1, null, false)\r\n              }\r\n            }}\r\n          >\r\n            {item.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 计算每一行的高度\r\n  calcRowHeight = ({ index }) => {\r\n    const { cityIndex, cityList } = this.state\r\n    // # / a / b ...\r\n    const letter = cityIndex[index]\r\n    // console.log(index)\r\n    // 计算每一行高度的公式：\r\n    // const letter = cityIndex[index] => # / a / b ...\r\n    // 城市索引高度 + 每个城市名称的高度 * 城市数量\r\n    // 36 + 50 * cityList[letter].length\r\n    // return 36 + 50 * cityList[letter].length\r\n    return CITY_INDEX_HEIGHT + CITY_NAME_HEIGHT * cityList[letter].length\r\n  }\r\n\r\n  // 渲染右侧城市索引列表\r\n  renderCityIndex() {\r\n    const { cityIndex, activeIndex } = this.state\r\n\r\n    return cityIndex.map((item, index) => (\r\n      <li\r\n        key={item}\r\n        className=\"city-index-item\"\r\n        onClick={() => {\r\n          // console.log('当前索引：', index, this.listRef)\r\n\r\n          // 在此处，要手动调用 List 组件的 scrollToRow 方法。\r\n          // 应该使用 ref 来调用组件的方法！\r\n          this.listRef.current.scrollToRow(index)\r\n        }}\r\n      >\r\n        <span className={activeIndex === index ? 'index-active' : ''}>\r\n          {item === 'hot' ? '热' : item.toUpperCase()}\r\n        </span>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  // 滚动列表时让后侧城市索引高亮\r\n  onRowsRendered = ({ startIndex }) => {\r\n    // console.log('当前可视区最顶的索引号为：', startIndex)\r\n    if (startIndex !== this.state.activeIndex) {\r\n      this.setState({\r\n        activeIndex: startIndex\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"citylist\">\r\n        {/* 顶部导航栏 */}\r\n        <NavHeader>城市选择</NavHeader>\r\n        {/* 城市列表： */}\r\n        {/* \r\n          注意：列表中，我们将每一组分类看做一行数据（比如：索引为A，索引为B）\r\n\r\n          width 和 height： 表示视口（可见）的高度\r\n          rowCount 表示：列表的长度，也就是一共有多少行数据\r\n          rowHeight 表示：每一行的高度\r\n          rowRenderer 表示：指定每一行要渲染什么内容的函数\r\n        */}\r\n        <AutoSizer>\r\n          {({ height, width }) => (\r\n            <List\r\n              ref={this.listRef}\r\n              width={width}\r\n              height={height}\r\n              rowCount={this.state.cityIndex.length}\r\n              rowHeight={this.calcRowHeight}\r\n              rowRenderer={this.rowRenderer}\r\n              onRowsRendered={this.onRowsRendered}\r\n              scrollToAlignment=\"start\"\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n\r\n        {/* 右侧城市索引列表结构 */}\r\n        <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}